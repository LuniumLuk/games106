#version 450

#extension GL_EXT_shader_atomic_float : require

layout (local_size_x = 16, local_size_y = 16) in;
layout (set = 0, binding = 0, rgba8) uniform readonly image2D u_color;
layout (set = 0, binding = 1, rgba32f) uniform readonly image2D u_depth;
layout (set = 0, binding = 2, r8ui) uniform uimage2D u_output;
layout (set = 0, binding = 3, rg32f) uniform image2D u_error;

layout (set = 0, binding = 4) uniform UBOCompute 
{
	mat4 reprojection;
	int mode;
	float sensitivity;
} uboCompute;

#define PALETTE_1_INVOCATION_PER_PIXEL      5
#define PALETTE_1_INVOCATION_PER_2X1_PIXELS 6
#define PALETTE_1_INVOCATION_PER_1X2_PIXELS 7
#define PALETTE_1_INVOCATION_PER_2X2_PIXELS 8
#define PALETTE_1_INVOCATION_PER_4X2_PIXELS 9
#define PALETTE_1_INVOCATION_PER_2X4_PIXELS 10
#define PALETTE_1_INVOCATION_PER_4X4_PIXELS 11

float luminance(vec3 color) {
	return 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;
}

const float k = 2.13;
const float eps = 0.0001;

shared float sX;
shared float sY;
shared float sI;
shared float b_HX;
shared float b_HY;
shared float b_QX;
shared float b_QY;

void main() {
	const ivec2 inputImageSize = imageSize(u_color);
	const ivec2 outputImageSize = imageSize(u_output);
	const ivec2 texelSize = inputImageSize / outputImageSize;
	const ivec2 p = ivec2(gl_WorkGroupID.xy);
	const ivec2 texelCoord = ivec2(gl_WorkGroupID.xy) * texelSize;

	// initialize shared memory
	if (gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 0) {
		sX = 0.0;
		sY = 0.0;
		sI = 0.0;
		b_HX = 0.0;
		b_HY = 0.0;
		b_QX = 0.0;
		b_QY = 0.0;
	}
	memoryBarrierShared();

	// compute derivatives and accumulate
	if (gl_LocalInvocationID.x < texelSize.x && gl_LocalInvocationID.y < texelSize.y) {
		// content adaptive
		ivec2 pos = texelCoord + ivec2(gl_LocalInvocationID.x, gl_LocalInvocationID.y);
		float m = luminance(imageLoad(u_color, pos).rgb);
		if (gl_LocalInvocationID.x > 0) {
			float n = luminance(imageLoad(u_color, ivec2(pos.x - 1, pos.y)).rgb);
			float dx = (m - n) * 0.5;
			atomicAdd(sX, dx * dx);
		}
		if (gl_LocalInvocationID.y > 0) {
			float n = luminance(imageLoad(u_color, ivec2(pos.x, pos.y - 1)).rgb);
			float dy = (m - n) * 0.5;
			atomicAdd(sY, dy * dy);
		}
		atomicAdd(sI, m);

		// motion adaptive
		float depth = imageLoad(u_depth, texelCoord + ivec2(gl_LocalInvocationID.x, gl_LocalInvocationID.y)).z;
		vec2 texcoord = vec2(pos) / vec2(inputImageSize);
		vec2 ndcxy = texcoord * 2.0 - 1.0;
		vec4 ndc = vec4(ndcxy.x, -ndcxy.y, depth, 1.0);
		vec4 reprojPos = uboCompute.reprojection * ndc;
		vec2 previousTexcoord = (reprojPos.xy / reprojPos.w) * 0.5 + 0.5;
		previousTexcoord.y = 1.0 - previousTexcoord.y;
		vec2 velocity = (texcoord - previousTexcoord) * vec2(inputImageSize);

		float hx = pow(1.0 / (1.0 + pow(1.05 * abs(velocity.x), 3.10)), 0.35);
		float hy = pow(1.0 / (1.0 + pow(1.05 * abs(velocity.y), 3.10)), 0.35);
		float qx = k * pow(1.0 / (1.0 + pow(0.55 * abs(velocity.x), 2.41)), 0.49);
		float qy = k * pow(1.0 / (1.0 + pow(0.55 * abs(velocity.y), 2.41)), 0.49);

		atomicAdd(b_HX, hx);
		atomicAdd(b_HY, hy);
		atomicAdd(b_QX, qx);
		atomicAdd(b_QY, qy);
	}
	memoryBarrierShared();

	// result will be gathered and output by the main thread
	if (gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 0) {
		// content adaptive shading
		const float invTexelSize = 1.0 / float(texelSize.x * texelSize.y);
		float E_HX = sqrt(sX / float(texelSize.x - 1));
		float E_HY = sqrt(sY / float(texelSize.y - 1));
		const float I_avg = sI * invTexelSize;
		const float t = uboCompute.sensitivity;
		const float l = 0.0;
		const float tau = t * (I_avg + l);

		float history_E_HX = imageLoad(u_error, p).x;
		float history_E_HY = imageLoad(u_error, p).y;

		history_E_HX = mix(E_HX, history_E_HX, 0.975);
		history_E_HY = mix(E_HY, history_E_HY, 0.975);

		E_HX = clamp(E_HX, history_E_HX * (1.0 - eps), history_E_HX * (1.0 + eps));
		E_HY = clamp(E_HY, history_E_HY * (1.0 - eps), history_E_HY * (1.0 + eps));

		// motion adaptive shading
		const float E_HX_v = b_HX * invTexelSize * E_HX;
		const float E_HY_v = b_HY * invTexelSize * E_HY;
		const float E_QX_v = b_QX * invTexelSize * E_HX;
		const float E_QY_v = b_QY * invTexelSize * E_HY;

		uint shadingRate = PALETTE_1_INVOCATION_PER_4X4_PIXELS;
		uint rX = 2;
		uint rY = 2;
		if (uboCompute.mode == 0) {
			if (E_HX >= tau) {
				rX = 1;
			}
			else if (k * E_HX < tau) {
				rX = 4;
			}

			if (E_HY >= tau) {
				rY = 1;
			}
			else if (k * E_HY < tau) {
				rY = 4;
			}
		}
		else {
			if (E_HX_v >= tau) {
				rX = 1;
			}
			else if (E_QX_v < tau) {
				rX = 4;
			}

			if (E_HY_v >= tau) {
				rY = 1;
			}
			else if (E_QY_v < tau) {
				rY = 4;
			}
		}

		if (rX == 1 && rY == 1) {
			shadingRate = PALETTE_1_INVOCATION_PER_PIXEL;
		}
		else if (rX == 1 && rY == 2) {
			shadingRate = PALETTE_1_INVOCATION_PER_1X2_PIXELS;
		}
		else if (rX == 2 && rY == 1) {
			shadingRate = PALETTE_1_INVOCATION_PER_2X1_PIXELS;
		}
		else if (rX == 2 && rY == 2) {
			shadingRate = PALETTE_1_INVOCATION_PER_2X2_PIXELS;
		}
		else if (rX == 4 && rY == 2) {
			shadingRate = PALETTE_1_INVOCATION_PER_4X2_PIXELS;
		}
		else if (rX == 2 && rY == 4) {
			shadingRate = PALETTE_1_INVOCATION_PER_2X4_PIXELS;
		}

		uvec4 ret = uvec4(shadingRate, 0, 0, 0);
		imageStore(u_output, p, ret);
		imageStore(u_error, p, vec4(E_HX, E_HY, 0.0, 0.0));
	}
}
